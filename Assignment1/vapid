#!/usr/bin/python3

# Vapid program for Assignment 1
# Kevin Eaton
# Using PEFile from: https://github.com/erocarrera/pefile
# Super helpful tool to grab all the necessary data out of a PE File
# Also got help from:
# https://bufferoverflows.net/exploring-pe-files-with-python/
# did not take any chunks of code from it, but helped me understand how to use PE File

import pefile
import sys
import os


def vapid():
    # input error checks: should all return exit code 1
    if(len(sys.argv) != 3):
        raise SystemExit(
            'Usage: ./vapid [PE file name in curr dir] [target virtual address]')
    if(not os.path.exists('./' + sys.argv[1])):
        raise SystemExit('Error: PE file \"' + sys.argv[1] + '\" does not exist.')
    try:
        if(sys.argv[2][0:2] == '0x'):  # if it is given as hex, turn into int to do math on it
            target_virtual_address = int(sys.argv[2], 16)
        else:  # if given as int
            target_virtual_address = int(sys.argv[2])
    except:
        raise SystemExit('Error: given target virtual address not a valid hex number.')

    
    # using pefile to identify features of the PE file
    # first creating pe object
    pe = pefile.PE(sys.argv[1])

    # ImageBase to convert relative to absolute
    image_base = pe.OPTIONAL_HEADER.ImageBase
    
    #start as ??, if it finds nothing print as that
    target_file_pointer = "??"
    
    for section in pe.sections:
        relative_virtual_address = section.VirtualAddress + image_base
        # check if current virtual address less than target virtual address
        # also check if the relative va + section header size is greater than target
        if(relative_virtual_address < target_virtual_address):
            if((relative_virtual_address + section.Misc_VirtualSize) > target_virtual_address):
                offset = target_virtual_address - relative_virtual_address
                target_file_pointer = hex(section.PointerToRawData + offset)


    #print results
    print(hex(target_virtual_address) + " -> " + target_file_pointer)

def to_dec(hexnum):
    return int(hexnum, 16)

    # https://bufferoverflows.net/exploring-pe-files-with-python/
if __name__ == "__main__":
    vapid()
